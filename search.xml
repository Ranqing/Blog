<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在个人主页的子目录下搭建博客</title>
    <url>/blog/2020/05/15/How%20to%20build%20a%20blog/</url>
    <content><![CDATA[<p>由于之前已经用了github.io这个repo来作为个人主页，因此想把个人博客作为该主页的二级目录，试了很多方法最后终于成功了。<br>这篇文章是可行方法的具体步骤，同时也作为该博客的测试篇！</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>搭建博客之前，我已经在github创建了username.github.io，且在aliyun上买好了域名做好了映射。<br>以上都完成好之后，在本地安装node.js 和 hexo。</p>
<h3 id="安装命令-mac"><a href="#安装命令-mac" class="headerlink" title="安装命令(mac)"></a>安装命令(mac)</h3><p>需要去node.js官网下载pkg安装软件，安装好进行检查。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## install node.js , come with npm together</span></span><br><span class="line"><span class="comment">## npm is the package manager of node.js</span></span><br><span class="line"><span class="comment">## check</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>安装node.js无误之后再利用npm安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>可能会遇到一些问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 需要替换为taobao源，之后npm换为cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">## 需要修改属性</span></span><br><span class="line">sudo chown -R <span class="variable">$USER</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>安装完成之后使用<code>hexo -v</code>进行检查</p>
<h2 id="建立本地的hexo-blog"><a href="#建立本地的hexo-blog" class="headerlink" title="建立本地的hexo blog"></a>建立本地的hexo blog</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo generate / hexo g  <span class="comment">#生成静态文件</span></span><br><span class="line">hexo server   / hexo s  [-i 127.0.0.1] [-p 4000]<span class="comment">#默认在本地的4000端口启动项目</span></span><br><span class="line">hexo deploy   / hexo d  <span class="comment">#将.deploy目录部署 [到Github]</span></span><br><span class="line">hexo g -d     / hexo d -g  <span class="comment">#生成完毕后自动部署</span></span><br></pre></td></tr></table></figure>

<h2 id="建立Github-Repo，并且修改hexo-blog下的-config-yml"><a href="#建立Github-Repo，并且修改hexo-blog下的-config-yml" class="headerlink" title="建立Github Repo，并且修改hexo blog下的_config.yml"></a>建立Github Repo，并且修改hexo blog下的_config.yml</h2><p>直接在Github上New一个Repo，名称叫做所需网址的二级目录名称（e.g. blog)<br>修改_config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line">url: https://username.github.io/blog</span><br><span class="line">root: /blog/</span><br><span class="line">permalink: :year/:month/:day/:title</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/username/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="执行部署"><a href="#执行部署" class="headerlink" title="执行部署"></a>执行部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>打开github上blog的setting界面，Github Pages勾选master branch。<br>此时输入网址 <a href="http://www.username.com/blog" target="_blank" rel="noopener">http://www.username.com/blog</a> 就可以访问了。<br>所有的文章的位置在my-blog/source/_posts 目录下，且使用markdown语法。</p>
]]></content>
  </entry>
  <entry>
    <title>Dynamic Programming</title>
    <url>/blog/2020/06/15/Dynamic%20Programming/</url>
    <content><![CDATA[<p>处理字符串是动态规划经典题目类型之一，包括：最长递增子序列/子串；最长公共子序列/子串；最长回文子序列/子串；其中子串要求元素是连续的，而子序列不需要。这篇文章讲先对动态规划进行回顾，然后结合几个经典的字符串求解问题进行分析，并给出代码。</p>
<h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>总的来说，动态规划是一种解决问题的方法。</p>
<p>用小学数学进行解释：如果我们知道 $1+1+1+1+1 = 5$，那么可以很快计算出 $1+1+1+1+1+1 = 6$，这是因为之前已经计算过前5项的值，即出现了重复子问题。这也类似于在证明中常用的数学归纳法，假设在问题规模为N时结论成立，只需要证明该结论为N+1时结论也成立，则该结论即是普适的。另外知乎上还有高赞回答提到可以用数列中的通项公式来理解动态规划。</p>
<p>以上这些理解方式的共同点在于，要求解大规模问题时，先去求解小规模的该问题，即找到重复子问题，然后记录小规模的子问题的值，最后快速得到大规模的该问题的结果。（TODO 用递归的思路来解决，对递归中的相同的子问题进行记录，避免重复计算）。</p>
<p>一个典型的动态规划求解分为以下几步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 确定DP状态，即要求解的问题</span><br><span class="line">2. 确定边界处的DP状态值，即Base Case的DP值</span><br><span class="line">3. 确定 i 到 i+1 的DP状态转移方程 （类似于通项公式推导）</span><br><span class="line">4. 编写问题规模从小到大的程序求解最终答案</span><br></pre></td></tr></table></figure>

<p>接下来我们用Leetcode中一些字符串相关的典型DP问题对这些步骤进行理解。</p>
<h3 id="最长递增子序列-最长连续递增子串"><a href="#最长递增子序列-最长连续递增子串" class="headerlink" title="最长递增子序列 / 最长连续递增子串"></a>最长递增子序列 / 最长连续递增子串</h3><p>最长递增子序列原题链接<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">Leetcode 300</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个无序的整数数组，找到其中最长上升子序列的长度。</span><br><span class="line">示例:</span><br><span class="line">输入: [10,9,2,5,3,7,101,18]</span><br><span class="line">输出: 4 </span><br><span class="line">解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。</span><br><span class="line">说明:</span><br><span class="line">可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</span><br><span class="line">你算法的时间复杂度应该为 O(n2) 。</span><br><span class="line">进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?</span><br></pre></td></tr></table></figure>
<p>按照上面的典型求解步骤，题解如下：</p>
<p>1) 确定DP状态：一维dp数组，<code>dp[i]</code>表示以<code>num[i]</code>为结尾的递增子序列的长度。<br>2) 确定DP初始和边界状态：由于每个元素的递增子序列都会包括自己，因此初始状态所有元素为1，边界状态：<code>dp[0]=1</code><br>3) 确定DP状态转移方程：<code>dp[i] = num[i] &gt; num[j] ? max(dp[j]) + 1 : dp[i]</code> ; num[j] 是 num[i]之前的所有元素；<br>4) 返回结果是dp数组中的最大值。编写程序：问题规模从小到大</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int cnt &#x3D; nums.size();</span><br><span class="line">    if(0&#x3D;&#x3D;cnt) return 0;</span><br><span class="line">    vector&lt;int&gt; dp(cnt, 1);</span><br><span class="line">    int max_dp &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; cnt; ++i) &#123;</span><br><span class="line">        for(int j &#x3D; 0; j &lt; i; ++j) &#123;</span><br><span class="line">            if(nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] &#x3D; max(dp[i], dp[j]+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max_dp &#x3D; std::max(dp[i], max_dp);</span><br><span class="line">    &#125;</span><br><span class="line">    return max_dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最大连续递增子串<a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">Leetcode 674</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个未经排序的整数数组，找到最长且连续的的递增序列，并返回该序列的长度。</span><br><span class="line">示例：</span><br><span class="line">输入: [1,3,5,4,7]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长连续递增序列是 [1,3,5], 长度为3。</span><br><span class="line">尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。</span><br></pre></td></tr></table></figure>
<p>按照上面的求解步骤，题解如下：</p>
<p>1) 确定DP状态：一维数组，<code>dp[i]</code>表示以<code>num[i]</code>为结尾的最长连续递增子序列的长度。<br>2) 确定DP初始和边界状态：由于每个元素的递增子序列都会包括自己，因此初始状态所有元素为1，边界状态：<code>dp[0]=1</code><br>3) 确定DP状态转移方程：<code>dp[i+1] = num[i+1] &gt; num[i] ? dp[i]+1 : 1</code>;<br>4) 返回结果是dp数组中的最大值。编写程序：从第一个元素循环到最后一个元素。<br>与上题不同，此题要求连续递增，那么当相邻两元素不是递增关系时，那么重新从当前元素开始计算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int lengthOfLCIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int cnt &#x3D; nums.size();</span><br><span class="line">    if(0&#x3D;&#x3D;cnt) return 0;</span><br><span class="line">    vector&lt;int&gt; dp(cnt, 1);</span><br><span class="line">    int max_dp &#x3D; dp[0];</span><br><span class="line">    for(int i &#x3D; 1; i &lt; cnt; i++) &#123;</span><br><span class="line">        if(nums[i] &gt; nums[i-1]) &#123;</span><br><span class="line">            dp[i] &#x3D; dp[i-1]+1;</span><br><span class="line">        &#125; </span><br><span class="line">        max_dp &#x3D; max(dp[i], max_dp);</span><br><span class="line">    &#125;</span><br><span class="line">    return max_dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进阶：最小窗口子序列<a href="https://leetcode-cn.com/problems/minimum-window-subsequence/" target="_blank" rel="noopener">Leetcode 727</a>。</p>
<h3 id="最长公共子序列-最长公共子串"><a href="#最长公共子序列-最长公共子串" class="headerlink" title="最长公共子序列 / 最长公共子串"></a>最长公共子序列 / 最长公共子串</h3><p>最长公共子序列<a href="https://leetcode-cn.com/problems/longest-common-subsequence/" target="_blank" rel="noopener">Leetcode 1143</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</span><br><span class="line">例如，&quot;ace&quot; 是 &quot;abcde&quot; 的子序列，但 &quot;aec&quot; 不是 &quot;abcde&quot; 的子序列。</span><br><span class="line">两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</span><br><span class="line">若这两个字符串没有公共子序列，则返回 0。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">输入：text1 &#x3D; &quot;abcde&quot;, text2 &#x3D; &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot;，它的长度为 3。</span><br></pre></td></tr></table></figure>
<p>若采用暴力解法，枚举所有子序列($n!$)，明显TLE。动态规划解法：引入二维状态表<code>dp[i][j]</code>表示字符串$S_1$中字符串<code>[0,...,i-1]</code>和字符串$S_2$中字符<code>[0,...,j-1]</code>的最大公共子序列的长度，那么递推公式为：</p>
<ul>
<li>当 <code>i==0</code> 或者 <code>j==0</code> 时，即边界状态，<code>dp[0][j] = 0, dp[i][0] = 0</code></li>
<li>当 <code>i &gt; 0 &amp;&amp; j &gt; 0</code> 时:<ul>
<li><code>S1[i-1]==S2[j-1]</code> ： <code>dp[i][j] = dp[i-1][j-1] + 1</code></li>
<li><code>S1[i-1]!=S2[j-1]</code> ： <code>dp[i][j] = max(dp[i-1][j], dp[i][j-1])</code></li>
</ul>
</li>
</ul>
<p>由此可以写出$O(n^2)$的算法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int LCS(const string&amp; S1, const string&amp; S2) &#123;</span><br><span class="line">    int m &#x3D; S1.size(), n &#x3D; S2.size();</span><br><span class="line">    if(0 &#x3D;&#x3D; m || 0 &#x3D;&#x3D; n) return 0;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;int&gt; &gt; dp(m+1);</span><br><span class="line">    for(size_t i &#x3D; 0; i &lt;&#x3D; m; ++i) &#123;</span><br><span class="line">        dp[i].resize(n+1, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int max_len &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; m; ++i) &#123;</span><br><span class="line">        for(int j &#x3D; 1; j &lt;&#x3D; n; ++j) &#123;</span><br><span class="line">            if(S1[i-1] &#x3D;&#x3D; S2[j-1]) &#123;</span><br><span class="line">                dp[i][j] &#x3D; dp[i-1][j-1] + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                dp[i][j] &#x3D; max(dp[i-1][j], dp[i][j-1]);</span><br><span class="line">            &#125;</span><br><span class="line">            max_len &#x3D; max(dp[i][j], max_len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return max_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一些变形题目，比如这“每次可以删除一个字符，然后问删除的最少次数，使得两个字符串相同”。</p>
<p>最长公共子串<a href="https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/" target="_blank" rel="noopener">Leetcode 718</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">输入: A: [1,2,3,2,1]; B: [3,2,1,4,7]</span><br><span class="line">输出: 3</span><br><span class="line">解释: </span><br><span class="line">长度最长的公共子数组是 [3, 2, 1]。</span><br></pre></td></tr></table></figure>
<p>此题目即为求解最长连续公共子序列，暴力解法是枚举子数组的起始位置和长度，然后进行比较，算法复杂度为$O(n^4)$。动态规划解法：引入二维状态表<code>dp[i][j]</code>表示第一个数组中前<code>i</code>个元素组成的子数组与第二个数组中前<code>j</code>个元素组成的子数组的最大公共连续子数组的长度，那么递推公式为：</p>
<ul>
<li>当 <code>i==0</code> 或者 <code>j==0</code> 时，即边界状态，<code>dp[0][j] = 0, dp[i][0] = 0</code></li>
<li>当 <code>i &gt; 0 &amp;&amp; j &gt; 0</code> 时:<ul>
<li><code>S1[i-1]==S2[j-1]</code> ： <code>dp[i][j] = dp[i-1][j-1] + 1</code></li>
<li><code>S1[i-1]!=S2[j-1]</code> ： <code>dp[i][j] = 0</code></li>
</ul>
</li>
</ul>
<p>解释一下状态转移方程，与最长公共子序列不同，由于要求是连续的子序列，当出现不想等的元素那么从0开始重新计算。由此写出动态规划代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int findLength(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) &#123;</span><br><span class="line">    int m &#x3D; A.size(), n &#x3D; B.size();</span><br><span class="line">    if(0&#x3D;&#x3D;m || 0&#x3D;&#x3D;n) return 0;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(m+1);</span><br><span class="line">    for(int i &#x3D; 0; i &lt;&#x3D; m; ++i) &#123;</span><br><span class="line">       dp[i].resize(n+1, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int max_len &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; m; ++i) &#123;</span><br><span class="line">        for(int j &#x3D; 1; j &lt;&#x3D;n; ++j) &#123;</span><br><span class="line">            if(B[j-1] &#x3D;&#x3D; A[i-1]) &#123;</span><br><span class="line">                dp[i][j] &#x3D; dp[i-1][j-1] + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                dp[i][j] &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">            max_len &#x3D; max(dp[i][j], max_len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return max_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="最长回文子序列-最长回文子串"><a href="#最长回文子序列-最长回文子串" class="headerlink" title="最长回文子序列 / 最长回文子串"></a>最长回文子序列 / 最长回文子串</h3><p>最长回文子序列<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">Leetcode 516</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个字符串 s ，找到其中最长的回文子序列，并返回该序列的长度。可以假设 s 的最大长度为 1000 。</span><br><span class="line">示例1:</span><br><span class="line">输入: &quot;bbbab&quot;</span><br><span class="line">输出: 4</span><br><span class="line">示例2:</span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<p>子序列可以不连续，因此采用动态规划解法，4个要素：<br>1）二维状态数组，<code>dp[i][j]</code>表示以<code>s[i]</code>开始，<code>s[j]</code>结尾的回文子序列的最大长度<br>2）状态转移方程，当<code>s[i]==s[j]</code>时，<code>dp[i][j] = dp[i+1][j-1]+2</code>；否则，<code>dp[i][j] = max(dp[i+1][j], dp[i][j-1])</code>。<br>3）边界条件：<code>i+1 &lt; n &amp;&amp; j-1&gt;0 &amp;&amp; j-1-(i+1) &gt;= 0</code><br>4) 状态表需要反着来，从右下角到左上角才能保证正确的状态转移关系</p>
<p>输出整个字符串的最大回文子序列： <code>dp[0][n-1]</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int longestPalindromeSubseq(string s) &#123;</span><br><span class="line">    int n &#x3D; s.length();</span><br><span class="line">    if(1&#x3D;&#x3D;n) return s;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(n);</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; ++i) &#123;</span><br><span class="line">        dp[i].resize(n, 0);</span><br><span class="line">        dp[i][i] &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i &#x3D; n-1; i&gt;&#x3D;0; --i) &#123;</span><br><span class="line">        for(int j &#x3D; i+1; j &lt; n; ++j) &#123;</span><br><span class="line">            if(s[i] &#x3D;&#x3D; s[j]) &#123;</span><br><span class="line">                dp[i][j] &#x3D; dp[i+1][j-1] + 2;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                dp[i][j] &#x3D; max(dp[i+1][j], dp[i][j-1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[0][n-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>最长回文子串<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">Leetcode 5</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br><span class="line">示例1:</span><br><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line">示例2:</span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>
<p>由于题目中有给出字符串长度不超过1000，即$O(n^2)$的解法是可以被接受的，暴力解法（枚举字符串判断是否为回文串）和枚举中心法都可以进行求解。<br>动态规划解法：回文串具有天生的状态转移性质：当字符串<code>s[i,...j]</code>是回文子串，那么<code>s[i+1,...j-1]</code>一定是字符串且<code>s[i]==s[j]</code>。<br>考虑边界条件，子串长度为1或者2，当子串长度为1时那么一定为回文串，而当子串长度为2时则当满足字符相等时，则为回文串。</p>
<p>1) 二维状态数组<code>dp[i][j]</code>表示字符子串<code>s[i,...,j]</code>是否为回文串<br>2）状态转移方程：<code>dp[i][j] = (s[i]==s[j] &amp;&amp; dp[i+1][j-1])</code><br>3) 边界条件：下标边界，即<code>(j-1) - (i+1) + 1 &lt; 2</code>，整理得到：<code>j-i &lt; 3</code> ，等价于 <code>j-i+1 &lt; 4</code>；<br>4) 左下方-&gt;右上方。</p>
<p>输出：当一个子串是回文串，记录起始和长度，最后进行子串截取即可。<br>边界条件给出的实际上是：当子串长度为2或者3的时候，是否为回文串不用检查，这也是动态规划虽然也是$O(n^2)$，但是比暴力和枚举中心的方法简单的原因。<br>可以得到一个通用的状态转移方程：<code>dp[i][j] = (s[i]==s[j] &amp;&amp; ((j-i&lt;3) || dp[i+1][j-1])</code><br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string longestPalindrome(string s) &#123;</span><br><span class="line">    int n &#x3D; s.length();</span><br><span class="line">    if(1&#x3D;&#x3D;n) return s;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;bool&gt;&gt; dp(n);</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; ++i) &#123;</span><br><span class="line">        dp[i].resize(n, false);</span><br><span class="line">        dp[i][i] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int start &#x3D; 0, max_len &#x3D; 0;</span><br><span class="line">    for(int j &#x3D; 1; j &lt; n; ++j) &#123;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; j; ++i) &#123;  &#x2F;&#x2F;填表过程，实际提交这里应该是 i &lt;&#x3D; j</span><br><span class="line">            if(s[i] !&#x3D; s[j]) &#123;</span><br><span class="line">                dp[i][j] &#x3D; false;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if(j-i&lt;3) &#123;</span><br><span class="line">                    dp[i][j] &#x3D; true;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dp[i][j] &#x3D; dp[i+1][j-1];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(true &#x3D;&#x3D; dp[i][j] &amp;&amp; (j-i+1 &gt; max_len)) &#123;</span><br><span class="line">                max_len &#x3D; j-i+1;</span><br><span class="line">                start &#x3D; i;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s.substr(start, max_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了暴力解法，中心枚举解法以及动态规划方法之外，本题终极解法是Manacher解法，复杂度为$O(n)$。以后可以专门再讨论一次。</p>
<h3 id="连续子数组的最大和-乘积最大连续子数组"><a href="#连续子数组的最大和-乘积最大连续子数组" class="headerlink" title="连续子数组的最大和 / 乘积最大连续子数组"></a>连续子数组的最大和 / 乘积最大连续子数组</h3><p>连续子数组的最大和<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">Leetcode 53</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line">示例：</span><br><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure>
<p>使用动态规划思想，引入一维状态数组，<code>dp[i]</code>表示以第i个元素结尾的连续数组的最大和，<strong>此连续数组必包含元素nums[i]</strong>, 那么：</p>
<p>1）边界情况：<code>dp[0] = a[0]</code>;<br>2) 状态转移方程：<code>dp[i] = max(dp[i-1] + a[i], a[i])</code>;</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maxSubArray(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int n &#x3D; nums.size();</span><br><span class="line">    if(0&#x3D;&#x3D;n) return 0;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; dp(n,0);</span><br><span class="line">    dp[0] &#x3D; nums[0];</span><br><span class="line">    int max_sum &#x3D; dp[0];</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] &#x3D; max(dp[i-1] + nums[i], nums[i]); </span><br><span class="line">        max_sum &#x3D; max(dp[i], max_sum);</span><br><span class="line">    &#125;</span><br><span class="line">    return max_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思考变形题：最大子序列和，即不要求连续。</p>
<p>乘积最大连续子数组<a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">Leetcode 152</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</span><br><span class="line">示例：</span><br><span class="line">输入: [2,3,-2,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>
<p>由连续子数组的最大和可以推出转移方程<code>dp[i] = max(dp[i-1]*a[i], a[i])</code>; 但在输入样例$a=\lbrace{5,6,−3,4,−3}\rbrace$中，得到的状态值为$dp=\lbrace{5,30,-3,4,-3}\rbrace$，那么答案为30。但此时最大值应该为所有元素的乘积1080。<br>出错的原因是，即此题需要注意的点在于，<strong>负数乘以负数为正，那么也有可能产生最大值</strong>。<br>可以分当前元素的符号来考虑，当前位置如果是一个负数的话，那么我们希望以它前一个位置结尾的某个段的积也是个负数，这样就可以负负得正，并且我们希望这个积尽可能「负得更多」，即尽可能小。当前位置如果是一个正数的话，那么希望以它前一个位置结尾的某个段的积也是个正数，并且希望它尽可能地大，因此需要维护两个状态数组，第i个状态分别表示以元素<code>a[i]</code>结尾的连续子数组的最大值和最小值，那么状态转移方程如下：</p>
<p>$$dp_{min}[i] = min(dp_{min}[i-1]\ast{a[i]}, a[i], dp_{max}[i-1]\ast{a[i]})$$</p>
<p>$$dp_{max}[i] = max(dp_{max}[i-1]\ast{a[i]}, a[i], dp_{min}[i-1]\ast{a[i]})$$</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int maxProduct(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int n &#x3D; nums.size();</span><br><span class="line">    if(0&#x3D;&#x3D;n) return 0;</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; max_dp(n,1), min_dp(n,1);</span><br><span class="line">    max_dp[0] &#x3D; nums[0], min_dp[0] &#x3D; nums[0];</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line">        max_dp[i] &#x3D; max(max(max_dp[i-1] * nums[i], nums[i]), min_dp[i] * nums[i]);</span><br><span class="line">        min_dp[i] &#x3D; min(min(min_dp[i-1] * nums[i], nums[i]), max_dp[i] * nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int max_product &#x3D; max_dp[0];</span><br><span class="line">    for(int i &#x3D; 1; i &lt; n; ++i) &#123;</span><br><span class="line">        max_product &#x3D; max(max_dp[i], max_product);</span><br><span class="line">    &#125;</span><br><span class="line">    return max_product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="矩阵最短路径和-矩阵从左上角到右下角的所有路径"><a href="#矩阵最短路径和-矩阵从左上角到右下角的所有路径" class="headerlink" title="矩阵最短路径和 / 矩阵从左上角到右下角的所有路径"></a>矩阵最短路径和 / 矩阵从左上角到右下角的所有路径</h3><p>矩阵最短路径和<a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">Leetcode 64</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</span><br><span class="line">说明：每次只能向下或者向右移动一步。</span><br><span class="line">示例:</span><br><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure>
<p>使用动态规划思想，要求解从<code>(0,0)</code>到<code>(m,n)</code>的最小路径和，由于移动方向只能向下或者向右，那么转换为求解从<code>(0,0)</code>到<code>(m-1,n)</code>和<code>(0,0)</code>到<code>(m,n-1)</code>的最小路径和，只需要选取其中更小值与当前元素相加即可得到结果。动态规划四个步骤如下（也可以很简单的使用递归）：</p>
<p>1) 确定DP状态：二维状态数组，<code>dp[i][j]</code>表示从<code>(0,0)</code>到<code>(i,j)</code>的最小路径和；<br>2) 确定DP初始和边界状态：第一行元素：<code>dp[0][j]=dp[0][j-1]+a[0][j]</code>；第一列元素：<code>dp[i][0]=dp[i-1][0]+a[i][0]</code>；<br>3) 确定DP状态转移方程：<code>dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + a[i][j]</code> ;<br>4) 返回结果是<code>dp[m-1][n-1]</code>。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int minPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</span><br><span class="line">    int m &#x3D; grid.size(), n &#x3D; grid[0].size();</span><br><span class="line">    if(m&#x3D;&#x3D;0||n&#x3D;&#x3D;0) return 0;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(m);</span><br><span class="line">    for(int i &#x3D; 0; i &lt; m; ++i) &#123;</span><br><span class="line">        dp[i].resize(n, 0);</span><br><span class="line">        dp[i][0] &#x3D; (i &#x3D;&#x3D; 0) ? grid[0][0] : (grid[i][0] + dp[i-1][0]);  </span><br><span class="line">    &#125;</span><br><span class="line">    for(int j &#x3D; 1; j &lt; n; ++j) &#123;</span><br><span class="line">        dp[0][j] &#x3D; grid[0][j] + dp[0][j-1];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt; m; ++i) &#123;</span><br><span class="line">        for(int j &#x3D; 1; j &lt; n; ++j) &#123;</span><br><span class="line">            dp[i][j] &#x3D; min(dp[i-1][j], dp[i][j-1]) + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[m-1][n-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>矩阵路径数目<a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">Leetcode 62</a>，题目描述如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</span><br><span class="line">机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</span><br><span class="line">问总共有多少条不同的路径？</span><br><span class="line"></span><br><span class="line">示例：输入: m &#x3D; 3, n &#x3D; 2；输出: 3</span><br><span class="line">解释:</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下</span><br><span class="line">2. 向右 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure>
<p>考虑解法时，可以自然想到从大规模问题到小规模问题，要求解从<code>(0,0)</code>到<code>(m-1,n-1)</code>的路径数目，由于只能向下或者想右，那么可以转换为求解：从<code>(0,0)</code>到<code>(m-2,n-1)</code>的路径数目 + 从<code>(0,0)</code>到<code>(m-1,n-2)</code>的路径数目 + 2；可以使用递归求解，也可以用动态规划：</p>
<p>1) 确定DP状态：二维状态数组，<code>dp[i][j]</code>表示从<code>(0,0)</code>到<code>(i,j)</code>的路径数目；<br>2) 确定DP初始和边界状态：第一行元素：从<code>(0,0)</code>到<code>(0,j)</code>只有向右这一条路径；第一列元素：从<code>(0,0)</code>到<code>(i,0)</code>只有向下这一条路径；<br>3) 确定DP状态转移方程：<code>dp[i][j] = dp[i-1][j] + dp[i][j-1] + 2</code> ;<br>4) 返回结果是<code>dp[m-1][n-1]</code>。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int uniquePaths(int m, int n) &#123;</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; dp(m);</span><br><span class="line">    for(int i &#x3D; 0; i &lt; m; ++i) &#123;</span><br><span class="line">        if(i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            dp[i].resize(n,1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dp[i].resize(n,0);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][0]&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 1; i &lt; m; i++) &#123;</span><br><span class="line">        for(int j &#x3D; 1; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] &#x3D; dp[i-1][j] + dp[i][j-1] + 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[m-1][n-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>此外还有很多动态规划的题目，可以看一下Leetcode题目分类练习。</p>
]]></content>
  </entry>
  <entry>
    <title>每日一题</title>
    <url>/blog/2020/06/14/Leetcode%20Everyday/</url>
    <content><![CDATA[<p>2020-06-14：<a href="https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/" target="_blank" rel="noopener">Leetcode 1300</a><br>2020-06-15: <a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="noopener">Leetcode 329</a></p>
]]></content>
  </entry>
  <entry>
    <title>Two-view Geometry</title>
    <url>/blog/2020/06/14/Two-view%20Geometry/</url>
    <content><![CDATA[<p>首先小结单目相机中学习过的问题：标定内参（vanishing point / zhang’s checkboard pattern）；标定外参（PnP / P3P / EPnP）；内外参数一起标定（camera resection）。本文学习Two-View Geometry，也可以称为对极几何（epipolar geometry）。假设两个相机可以看到空间同一个点 $P$，在左右相机的投影点分别为 $p$ 和 $q$，它们之间满足的几何性质被称为对极几何。</p>
<h3 id="几何概念"><a href="#几何概念" class="headerlink" title="几何概念"></a>几何概念</h3><ol>
<li><p>极平面 Epipolar Plane<br>由两个相机中心和三维点组成的平面。具体地，像素点 $p$，$q$ 与各自相机中心的连线得到的三维向量: $K_p^{-1}p$, $K_q^{-1}q$ 以及相机中心连线（基线：baseline）所组成的平面；</p>
</li>
<li><p>极线 Epipolar Line<br>Epipolar Plane和图像平面的交线，互为三维点与对应的相机中心的光线的投影。<code>p</code>点在第二张图的对应位置只能在该图上的epipolar line上，反之亦然。</p>
</li>
<li><p>极点 Epipole<br>两个相机中心的连线与图像平面的交点。还可以理解成为：一个同时可见的三维点与两个相机中心组成一个极平面，那么可以想象所有的极平面是绕着基线在旋转。这些极平面与图像相交得到的极线的交点即为epipole，即所有极线有唯一交点。</p>
</li>
</ol>
<h3 id="代数表示"><a href="#代数表示" class="headerlink" title="代数表示"></a>代数表示</h3><ol>
<li>Essential Matrix </li>
</ol>
<p><strong>相机内参已知</strong>，那么由像素点 $p$，$q$ 可以得到两个三维向量的方向： $K_p^{-1}p$ 和 $K_q^{-1}q$，此时这两个向量分别位于各自相机坐标系下，为了简写，直接记做 $p$，$q$。<br>当两个相机之间的旋转 $R$ 和平移 $T$ 已知，先把第二个相机中的三维向量根据旋转矩阵 $R$ 变换到第一个相机的坐标系中，为$R^Tq$，再根据Epipolar Geometry中的极平面的共面约束: $p$, $t$, $R^Tq$ 三个向量共面（在第一个相机坐标系下）；<br>共面约束在代数中表示为： 三个向量 $a$，$b$，$c$ 共面，那么其混合积（Mix Product）$(b\times{c})\cdot{a}$ 等于 $0$。理解：三个向量的混合积的物理意义表示这三个向量所组成平行六面体的体积，三个向量共面时体积为0。<br>则有代数方程：$(t\times{R^T}q)\cdot{p} = 0$，先把cross-product变换为矩阵计算，那么该代数方程可以写为 $p^T[t]_{\times}R^Tq = 0$，再对等式整体进行一次转置有：</p>
<p>$$q^TR[t]_{\times}p=0$$</p>
<p>其中矩阵 $R[t]_x$ 即为Essential Matrix $E$，这里的 $p$，$q$ 分别是相机坐标系由内参和像素点得到的三维向量。</p>
<p>以上，Essential Matrix的物理意义可以简单的概括为：两个相机内参已知，$p$，$q$ 是相机坐标系下的三维向量，满足等式：$pEq = 0$，$E=R[t]_{\times}$ 。 即若干个三维点在双目中可见，那么这些三维点在各自相机坐标系下的坐标应该满足的代数关系，$E$ 可以被分解为两个相机之间的相对外参：$R$，$t$，分别为一个正定矩阵和一个反对称矩阵。</p>
<ol start="2">
<li>Fundamental Matrix</li>
</ol>
<p><strong>相机内参未知</strong>，使用 $\hat{p}$，$\hat{q}$ 表示像素点，那么带入到Essential Matrix的方程中：</p>
<p>$$（(K_q)^{-1}·\hat{q})^T·R[t]_{\times}·((K_p)^{-1}·\hat{p})=0 $$</p>
<p>整理后有：</p>
<p>$$ \hat{q}^T·(K_q)^{-T}·R[t]_{\times}·(K_p)^{-1}·\hat{p}=0 $$ </p>
<p>其中的矩阵 $(K_q)^{-T}·R[t]_{\times}·(K_p)^{-1}$ 记做Fundamental Matrix $F$，表示两个图像平面对应点的像素坐标 $\hat{p}$，$\hat{q}$ （齐次坐标）应该满足的代数关系。之后的讨论中，为了简便，像素点也使用 $p$，$q$。与Essential Matrix的区别是：Fundamental Matrix 描述的是两个像素的关系，Essential Matrix 描述的是两个三维向量的关系。</p>
<p>更近一步理解Fundamental Matrix：Epipolar Geometry都可以从 $F$ 得到，比如第一张图的像素 $p$ 在第二张图像中的对应点 $q$ 一定位于极线 $Fp$ 上。<br>另外epipole的求解：假设 $e_1$ 是第二个相机中心 $C_2$在第一个相机的图像平面的投影点，$e_2$ 是第一个相机中心 $c_1$ 在第二个相机平面的投影点。由于所有的极线都通过epipole，那么对于相机1的任意的一个像素点 $p$，那么其极线 $Fp$ 都通过epipole $e_2$，意味着 $(e_2^T)Fp=0$，对于任何一个p都成立，那么 $(e_2^T)F=0$，反之有 $F(e_1)=0$成立。</p>
<h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><p>$F$ 的大小为3x3，初始自由度为9，由于方程定义在摄影几何，是equal up to scale，因此自由度实际为8。另外由于epipole的存在，那么 $rank(F)=2$， 因此 $F$ 的自由度为7。</p>
]]></content>
  </entry>
</search>
